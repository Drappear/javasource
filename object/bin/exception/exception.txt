Exception(예외)
    1. 프로그램 오류
        1) 컴파일 에러
            - 컴파일러가 동작하기 때문에 코드 작성 시 바로 발견됨
        2) 런타임 에러
            - 실행 시 예외 발생
            - 에러 : 메모리 부족 / 스택오버플로우 같은 복구하기 어려운 에러
            - 예외 : 수습가능한 상황
        3) 논리적 에러
            - 실행은 되지만 의도와 다르게 동작
    
    예외 클래스
    Object
        ㄴ Throwable
                ㄴ Exception                /               Error
                        ㄴ RuntimeException, ...
    
    예외 처리 : exception 발생 시 프로그램이 비정상 종료되는걸 막기 위해
        1) try ~ catch
        2) try ~ finally
        3) try ~ catch ~ finally
            - try문 만으로는 불가능, catch/finally 구문 필요
            
            try : 예외가 발생할 수 있는 코드 구문 작성
            catch : 예외 발생 시 무엇을 할 것인지 작성
            finally : 예외여부와 상관없이 무조건 수행해야 할 구문 작성
                - 자원 닫기
                    
            Checked Exception(컴파일 시 예외 체크)
                throw new Exception()

            unChecked Exception(런타임 시 예외 체크)
                throw new RuntimeException()


    