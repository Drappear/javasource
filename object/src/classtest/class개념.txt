클래스 : 객체를 정의해 놓은 것(설계도)

객체 : 사물 또는 개념(제품)
유형의 객체 - 자동차, 학생, TV...
무형의 객체 - 수학공식...

인스턴스(객체) : 클래스로부터 만들어진 객체

객체 구성요소
- 속성(property) : 멤버 변수, 특성, 필드, 상태
- 기능(function) : 메소드, 함수, 행위

인스턴스의 생성과 사용
1) 클래스 객체를 참조하기 위한 참조 변수를 선언
    ex) Tv tv;
2) 객체를 생성 후 객체의 주소를 참조변수에 저장
    ex) tv = new Tv();
3) 사용
    ex) tv.멤버변수
    ex) tv.메소드명()

메소드 : 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것
    필요한 값만 넣고 원하는 결과를 얻어내면 됨
    ex) Math.random()과 같이 사용법만 알면 됨
    사용 하는 이유
        1) 재 사용성 : 한번 만들면 다른 곳에서 사용 가능
        2) 중복된 코드 제거
        3) 프로그램 구조화
    메소드 선언
        반환타입 메소드명(타입 변수명, 타입 변수명, ...) {
            메소드 호출 시 수행될 코드...
        }
        매개변수(parameter)는 지역 변수
        return : 하나만 리턴 가능
                 반환 타입과 일치하거나 자동 형 변환이 가능해야함

오버로딩 : 매개 변수의 개수 또는 타입이 달라야 함
    1. 생성자 오버로딩 : 하나의 클래스에 동일한 이름의 생성자가 존재
    2. 메소드 오버로딩 : 하나의 클래스에 동일한 이름의 메소드가 존재

변수
    1. 선언 위치에 따른 변수의 종류
        -지역변수, 멤버변수(인스턴스 변수), 클래스 변수
        ex)
        class A{
            int iv; // 인스턴스 변수
            static int cv; // 클래스 변수

            void method(){
                int lv = 0; // 로컬 변수
            }
        }
    2. 선언 위치에 생성시기가 다름
        - 클래스 변수 : 클래스가 메모리에 올라갈 때
        - 인스턴스 변수 : 인스턴스가 생성되었을 때
        - 로컬 변수 : 변수 선언문이 수행되었을 때

메소드
    - static method : 클래스가 메모리에 올라갈 때 생성
    - non static method : 인스턴스가 생성될 때 생성
    
메소드 작성 시 매개변수 처리
    - 매개변수 기본타입으로 사용하는 경우 : 값만 복사됨
        기본타입 : 정수형, 실수형, 논리형, 문자형
    - 매개변수 참조타입으로 사용하는 경우 : 주소 복사 됨
        대문자로 시작하면 참조타입 : String, 클래스, 배열
